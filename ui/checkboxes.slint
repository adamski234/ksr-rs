import { CheckBox, ListView, ScrollView } from "std-widgets.slint";

// FIXME: CheckBoxes do not forward scroll event to the ScrollView/ListView underneath

export struct CheckBoxListElementData {
	text: string,
	checked: bool,
}

export component CheckBoxList inherits ScrollView {
	in-out property <[CheckBoxListElementData]> entries;
	callback entry-toggled(entry-index: int);
	VerticalLayout {
		spacing: 5px;
		padding: 5px;
		for entry[entry-index] in root.entries: child := CheckBox {
			checked: entry.checked;
			text: entry.text;
			toggled => {
				entry.checked = self.checked;
				root.entry-toggled(entry-index);
			}
		}
}
}

component CheckBoxTreePart {
	in-out property <CheckBoxListElementData> root-element;
	in-out property <[CheckBoxListElementData]> children;
	callback root-toggled();
	callback entry-toggled(entry-index: int);
	VerticalLayout {
		padding: 5px;
		spacing: 5px;

		CheckBox {
			padding: 5px;
			checked: root.root-element.checked;
			text: root.root-element.text;
			toggled => {
				root.root-element.checked = self.checked;
				root.root-toggled();
			}
		}
		VerticalLayout {
			spacing: 5px;
			padding-left: 20px;

			for entry[entry-index] in root.children: CheckBox {
				checked: entry.checked;
				text: entry.text;
				toggled => {
					entry.checked = self.checked;
					root.entry-toggled(entry-index);
				}
			}
		}
	}
}

export struct CheckBoxTreeData {
	root: CheckBoxListElementData,
	children: [CheckBoxListElementData]
}

export component CheckBoxTree inherits ListView {
	in-out property <[CheckBoxTreeData]> model;
	callback root-toggled(tree-toggled: int);
	callback child-toggled(tree-toggled: int, child-toggled: int);
	for tree-part[tree-index] in root.model: CheckBoxTreePart {
		root-element: tree-part.root;
		children: tree-part.children;

		entry-toggled(entry-index) => {
			root.child-toggled(tree-index, entry-index);
		}
		root-toggled => {
			tree-part.root.checked = self.root-element.checked;
			root.root-toggled(tree-index);
		}
	}
}